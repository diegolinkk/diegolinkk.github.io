<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Diegolinkk</title>
    <link>https://diegolinkk.github.io/posts/</link>
    <description>Recent content in Posts on Diegolinkk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Tue, 18 Oct 2022 22:30:27 -0300</lastBuildDate><atom:link href="https://diegolinkk.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Baixando submódulo do Git e Github</title>
      <link>https://diegolinkk.github.io/posts/baixando-submodulos-do-git-e-github/</link>
      <pubDate>Tue, 18 Oct 2022 22:30:27 -0300</pubDate>
      
      <guid>https://diegolinkk.github.io/posts/baixando-submodulos-do-git-e-github/</guid>
      <description>Nesse post vamos entender como baixar submódulos do Github juntamente com o clone do projeto.
O que são submódulos do git ? De uma forma bem resumida, é um git dentro de outro git.
Mas pra que isso serve ? Digamos que você esteja desenvolvendo um blog que utiliza um template de terceiro. Esse template por sua vez, tem seu próprio repositório git e seria interessante que você mantivesse sempre essa pasta atualizada no seu atual repositório, seja lá por motivos de segurança ou de otimização.</description>
    </item>
    
    <item>
      <title>Recebendo e trabalhando com parâmetros em scripts PHP</title>
      <link>https://diegolinkk.github.io/posts/como-receber-argumentos-em-scripts-php/</link>
      <pubDate>Mon, 17 Oct 2022 21:30:27 -0300</pubDate>
      
      <guid>https://diegolinkk.github.io/posts/como-receber-argumentos-em-scripts-php/</guid>
      <description>Nesse rápido post, vamos entender como receber argumentos vindos da linha de comando ao chamar um script PHP.
A variável $ARGV O elemento chave dessa questão é a variável pré definida $ARGV.
Essa variável do tipo array e esta armazena todos os parâmetros passados para o script. O primeiro elemento do array é sempre o nome do script e os demais são os argumentos passados.
Exemplo Vamos criar um script que exibe:</description>
    </item>
    
    <item>
      <title>Como Listar e conectar à Databases, listar tabelas e fazer queries no Postgres</title>
      <link>https://diegolinkk.github.io/posts/teste/</link>
      <pubDate>Sun, 31 Jul 2022 12:30:27 -0300</pubDate>
      
      <guid>https://diegolinkk.github.io/posts/teste/</guid>
      <description>Motivação e formato do post Esse post segue um modelo de colinha onde constantemente me vejo fazendo repetidas pesquisas no google para executar alguns comandos que são triviais mas a depender do período em que eu não uso determinada ferramenta (como é o caso do Postgres), eu acabo esquecendo. Então vamos lá:
Obs: todos os comandos já partem da premissa que você esteja conectado ao postgres
Listar database \l Conectar à database \c nome_da_database Listar tabelas (já conectado à database) \dt Query simples sobre uma tabela \select * from nome_da_tabela; fontes:</description>
    </item>
    
    <item>
      <title>Como Listar e conectar à Databases, listar tabelas e fazer queries no Postgres</title>
      <link>https://diegolinkk.github.io/posts/comandos-basicos-postgres/</link>
      <pubDate>Thu, 14 May 2020 18:30:27 -0300</pubDate>
      
      <guid>https://diegolinkk.github.io/posts/comandos-basicos-postgres/</guid>
      <description>Motivação e formato do post Esse post segue um modelo de colinha onde constantemente me vejo fazendo repetidas pesquisas no google para executar alguns comandos que são triviais mas a depender do período em que eu não uso determinada ferramenta (como é o caso do Postgres), eu acabo esquecendo. Então vamos lá:
Obs: todos os comandos já partem da premissa que você esteja conectado ao postgres
Listar database \l Conectar à database \c nome_da_database Listar tabelas (já conectado à database) \dt Query simples sobre uma tabela \select * from nome_da_tabela; fontes:</description>
    </item>
    
    <item>
      <title>Compartilhando pasta local com Container no Docker Toolbox</title>
      <link>https://diegolinkk.github.io/posts/compartilhando-pasta-docker-toolbox/</link>
      <pubDate>Thu, 14 May 2020 16:15:00 +0100</pubDate>
      
      <guid>https://diegolinkk.github.io/posts/compartilhando-pasta-docker-toolbox/</guid>
      <description>Para compartilhar arquivos entre host e container, devemos montar um volume e fazer a ligação entre eles pelo comando:
docker container run -v &amp;#34;/c/Users/diego/Html/&amp;#34;:/home/diego -it ubuntu bash Explicando comando: docker container run # comando básico do docker para executar/iniciar um container -v &amp;#34;/c/Users/diego/Html/&amp;#34;:/home/diego #aqui de fato estamos criando o volume, colocando o caminho da pasta na qual quero compartilhar na primeira metade e o ponto a ser montado no container na segunda metade -it ubuntu bash # -it são parâmetros que nos permitem controlar o container e bash é o aplicativo a ser excutado, no caso vamos executar um bash dentro do container Sendo o primeiro caminho relativo ao diretório do host, e o segundo sendo o ponto de montagem.</description>
    </item>
    
    <item>
      <title>Enviando Whatsapp sem contato na agenda</title>
      <link>https://diegolinkk.github.io/posts/enviar-whatsapp-sem-contato/</link>
      <pubDate>Wed, 06 May 2020 19:20:39 -0300</pubDate>
      
      <guid>https://diegolinkk.github.io/posts/enviar-whatsapp-sem-contato/</guid>
      <description>O post de hoje é bem simples e serve para enviar whatsapp sem ter um número de contato. Segue formulário abaixo:
Também serve para criar uma conversa consigo mesmo
Numero do contato: Enviar por Celular Enviar por Whatsapp Web</description>
    </item>
    
    <item>
      <title>Gerador De Senhas Em Python</title>
      <link>https://diegolinkk.github.io/posts/gerador-de-senhas-em-python/</link>
      <pubDate>Sat, 01 Feb 2020 16:08:27 -0300</pubDate>
      
      <guid>https://diegolinkk.github.io/posts/gerador-de-senhas-em-python/</guid>
      <description>Nesse post nós vamos criar um gerador de senhas simples em Python. Este gerador foi construido para fins didáticos e pode ser utilizado caso você precise gerar senhas que não possuam nenhum viés humano.
Conhecimento aplicado no tutorial Esse algorítmo foi feito em python e utiliza alguns recursos básicos da linguagem:
Importação de bibliotecas Funções Listas Laços de repetição Escopo do gerador de senhas Para dar uma certa liberade ao usuário, o nosso gerador permitirá que o mesmo escolha algumas variáveis:</description>
    </item>
    
  </channel>
</rss>
